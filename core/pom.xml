<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <artifactId>studyMaven</artifactId>
        <groupId>com.founder.cms</groupId>
        <version>3.1.2-SNAPSHOT</version>
        <!--这个表示父模块POM的相对路径-->
        <relativePath>../pom.xml</relativePath>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <!--从父模块继承了groupID和version，不用再写了-->
    <artifactId>studyMaven-core</artifactId>
    <!--在console输出的时候用名字，没有就用artifactID-->
    <name>studyMaven-core</name>
    <description>(必选) 知识服务核心功能</description>

    <dependencies>
        <dependency>
            <groupId>com.founder.cms</groupId>
            <artifactId>studyMaven-common</artifactId>
        </dependency>

        <dependency>
            <groupId>com.founder.cms</groupId>
            <artifactId>studyMaven-sys</artifactId>
        </dependency>

        <!-- 范围依赖，作用：
             1、控制依赖与3种classpath，编译、测试、运行的关系，默认是compile，3种都有效
             2、影响传递依赖，具体参考笔记中图片。
             3、依赖调节：原则一，路径最近者优先；原则二：第一声明者优先。-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${servlet.version}</version>
            <!--编译和测试时候用，运行时候容器已经提供了-->
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <!--还有一个典型例子是JDBC驱动-->
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--范围与provided一直，但是必须用systemPath显示指定路径，不可移植，谨慎使用-->
        <dependency>
            <groupId>javax.sql</groupId>
            <artifactId>jdbc-stdext</artifactId>
            <version>2.0</version>
            <scope>system</scope>
            <systemPath>${java.home}/lib/rt.jar</systemPath>
        </dependency>


        <!-- 可选依赖 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.10</version>
            <!--依赖我的项目不会自动依赖这个包，需要自己引入-->
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>8.4-701.jdbc3</version>
            <!--我的项目可能是个数据库工具，但是实际使用什么数据库由使用者决定-->
            <!--理想情况不应该使用可选依赖，应该符合单一职责性原则，这种情况就建立两个-->
            <optional>true</optional>
        </dependency>

        <!--排除依赖 -->
        <!--两种原因：-->
        <!--1.这个包引用了SNAPSHOT版本，我剔除后自己使用稳定版本-->
        <!--2.这个包应用了没有版权的包，我使用开源的包-->
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-neo4j-rest</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.neo4j.test</groupId>
                    <artifactId>neo4j-harness</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <!-- gstore -->
        <dependency>
            <groupId>edu.pku</groupId>
            <artifactId>GstoreJavaAPI</artifactId>
        </dependency>

        <!-- spring boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>

    </dependencies>

    <!--该插件可以生成querysdl需要的查询对象，执行mvn compile即可-->
    <build>
        <plugins>
            <plugin>
                <groupId>com.mysema.maven</groupId>
                <artifactId>apt-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>process</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>target/generated-sources/java</outputDirectory>
                            <processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>javax.inject</groupId>
                        <artifactId>javax.inject</artifactId>
                        <version>1</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

</project>