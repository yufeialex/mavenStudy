<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--约定优于配置（Conversion Over Configuration）-->
    <parent>
        <artifactId>spring-boot-starter-parent</artifactId>
        <groupId>org.springframework.boot</groupId>
        <version>1.3.5.RELEASE</version>
        <relativePath/>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <!--GAV中，G是项目，A是模块，打包的结果默认是使用A+版本号作为名称，而A的命名是项目名作为前缀。-->
    <artifactId>studyMaven</artifactId>
    <groupId>com.founder.cms</groupId>
    <version>3.1.2-SNAPSHOT</version>
    <packaging>pom</packaging>

    <description>聚合模块</description>

    <!--代码仓库，就是svn地址，用于发布版本和打分支，connection是读取的地址，developerConnection是写的地址-->
    <scm>
        <connection>scm:svn:http://fzkb.founder.com.cn/svn/zhihui/studyMaven/trunk</connection>
        <developerConnection>scm:svn:http://fzkb.founder.com.cn/svn/zhihui/studyMaven/trunk</developerConnection>
    </scm>

    <!--用于配置远程仓库信息，这里是我们公司的私服地址-->
    <!--如果是私服还有私服的认证信息，那个要配置在setting.xml里面-->
    <!--这个配置只对当前项目有效，如果全局有效，在setting.xml里面配置profile-->
    <repositories>
        <repository>
            <!--需要唯一，中央仓库是用central，这里id与setting.xml里面不一致，说明下载应该不需要密码，但是部署需要-->
            <id>founder</id>
            <!--也可以是其他协议，浏览器可访问-->
            <url>http://fzkb.founder.com.cn/nexus/content/groups/public/</url>
            <!--为false表示不能从这里下载稳定版本-->
            <releases><enabled>true</enabled></releases>
            <snapshots>
                <enabled>true</enabled>
                <!--从远程仓库检查更新的频率，默认daily，还有never,-->
                <!--always:每次构建都检查更新-->
                <!--interval:X,每隔X分钟检查一次-->
                <updatePolicy>daily</updatePolicy>
                <!--warn：构建时候输出警告-->
                <!--fail：遇到校验和错误就失败-->
                <checksumPolicy>ignore</checksumPolicy>
            </snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>founder</id>
            <url>http://fzkb.founder.com.cn/nexus/content/groups/public/</url>
        </pluginRepository>
    </pluginRepositories>

    <distributionManagement>
        <repository>
            <!--这里id与setting.xml里面一致，说明下载部署需要密码-->
            <!--部署时候用deploy插件-->
            <id>nexus-releases</id>
            <!--这个标签就是方便人阅读使用的-->
            <name>nexus distribution releases repository</name>
            <url>http://fzkb.founder.com.cn/nexus/content/repositories/releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <name>nexus distribution snapthot repository</name>
            <url>http://fzkb.founder.com.cn/nexus/content/repositories/snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <modules>
        <!--里面的值是模块pom文件所在的相对本pom文件的路径-->
        <!--maven会计算出一个反应堆构建顺序来构建-->
        <module>common</module>
        <module>core</module>
        <module>sys</module>
        <module>web</module>
    </modules>

    <!--maven内置3大属性支持灵活构建，即属性、Profile和资源过滤-->
    <!--有6类Maven属性，下面的是自定义属性，其他包括：
    内置属性，POM属性，settings属性，Java属性，环境变量属性-->
    <properties>
        <gstore.version>1.1</gstore.version>
        <!-- 升级 spring boot 1.3.5 中 mongo 版本 -->
        <mongodb.version>3.2.2</mongodb.version>

        <sdn.version>3.4.4.RELEASE</sdn.version>
        <xfire.version>1.2.6</xfire.version>
        <jexcelapi.version>2.6.12</jexcelapi.version>
        <jena.version>3.0.0</jena.version>
        <poi.version>3.9</poi.version>
        <cpdetector.version>1.0.7</cpdetector.version>
        <json-lib.version>2.4</json-lib.version>
        <opensaml.version>2.5.1-1</opensaml.version>
        <fastjson.version>1.2.24</fastjson.version>
        <hanlp.version>portable-1.3.4</hanlp.version>
        <!-- Web -->
        <jsp.version>2.2</jsp.version>
        <jstl.version>1.2</jstl.version>
        <servlet.version>3.1.0</servlet.version>

        <java.version>1.8</java.version>
        <autoVersionSubmodules>true</autoVersionSubmodules>
        <updateBranchVersions>true</updateBranchVersions>
        <additionalparam>-Xdoclint:none</additionalparam>
        <maven.test.skip>true</maven.test.skip>
        <docker.image.prefix>founder</docker.image.prefix>
        <skipDocker>true</skipDocker>
    </properties>

    <dependencyManagement>

        <!--除了继承以外，引入springboot的另一种方式-->
  <!--      <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.3.5.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>-->

        <dependencies>
            <!-- Spring Cloud -->
            <!--import范围依赖，只能在dependencyManagement中使用，必须依赖POM类型项目，-->
            <!--将其中的dependencyManagement配置导入并合并到当前POM的dependencyManagement元素中-->
            <!--如果想要在本模块使用与下面模块完全一样的dependencyManagement，除了复制配置或者继承，还可以用import-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Brixton.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Founder Dependencies -->
            <dependency>
                <groupId>com.founder.common</groupId>
                <artifactId>common-dependencies</artifactId>
                <version>${founder.common.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- cms -->
            <dependency>
                <groupId>com.founder.cms</groupId>
                <artifactId>studyMaven-common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.founder.cms</groupId>
                <artifactId>studyMaven-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.founder.cms</groupId>
                <artifactId>studyMaven-sys</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.founder.cms</groupId>
                <artifactId>studyMaven-web</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!-- Noo4j -->
            <dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-neo4j-rest</artifactId>
                <version>${sdn.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-neo4j</artifactId>
                <version>${sdn.version}</version>
            </dependency>

            <!-- xfire -->
            <dependency>
                <groupId>org.codehaus.xfire</groupId>
                <artifactId>xfire-core</artifactId>
                <version>${xfire.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.xfire</groupId>
                <artifactId>xfire-aegis</artifactId>
                <version>${xfire.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.xfire</groupId>
                <artifactId>xfire-java5</artifactId>
                <version>${xfire.version}</version>
            </dependency>

            <!-- excel-util -->
            <dependency>
                <groupId>net.sourceforge.jexcelapi</groupId>
                <artifactId>jxl</artifactId>
                <version>${jexcelapi.version}</version>
            </dependency>


            <!-- https://mvnrepository.com/artifact/org.apache.jena/jena -->
            <dependency>
                <groupId>org.apache.jena</groupId>
                <artifactId>jena-tdb</artifactId>
                <version>${jena.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${poi.version}</version>
            </dependency>

            <!-- 文件编码格式判断 -->
            <dependency>
                <groupId>cpdetector</groupId>
                <artifactId>cpdetector</artifactId>
                <version>${cpdetector.version}</version>
            </dependency>

            <!-- json -->
            <dependency>
                <groupId>net.sf.json-lib</groupId>
                <artifactId>json-lib</artifactId>
                <version>${json-lib.version}</version>
                <classifier>jdk15</classifier>
            </dependency>

            <dependency>
                <groupId>org.opensaml</groupId>
                <artifactId>opensaml</artifactId>
                <version>${opensaml.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>
            <!-- gstore -->
            <dependency>
                <groupId>edu.pku</groupId>
                <artifactId>GstoreJavaAPI</artifactId>
                <version>${gstore.version}</version>
            </dependency>

            <!--汉语言处理包-->
            <dependency>
                <groupId>com.hankcs</groupId>
                <artifactId>hanlp</artifactId>
                <version>${hanlp.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- spring boot 1.3.5 -->
        <resources>
            <resource>
                <!--为主资源目录开启过滤，这是为了解析资源文件中的Maven属性，不同profiles-->
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
                <!--下面是指定具体要过滤的文件-->
                <includes>
                    <include>**/application*.yml</include>
                    <include>**/application*.yaml</include>
                    <include>**/application*.properties</include>
                </includes>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <excludes>
                    <exclude>**/application*.yml</exclude>
                    <exclude>**/application*.yaml</exclude>
                    <exclude>**/application*.properties</exclude>
                </excludes>
            </resource>
        </resources>
        <pluginManagement>
            <!--maven有三个默认生命周期，生命周期有多个阶段。
            maven还有插件，每个插件有多个功能，叫做目标。
            可以把生命周期的阶段和插件的目标绑定，这些工作maven给我们做好了大部分，
            基本不用我们再绑定了。-->
            <plugins>
                <plugin>
                    <groupId>com.mysema.maven</groupId>
                    <artifactId>apt-maven-plugin</artifactId>
                    <version>1.1.3</version>
                </plugin>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.4.13</version>
                </plugin>
                <plugin>
                    <groupId>com.akathist.maven.plugins.launch4j</groupId>
                    <artifactId>launch4j-maven-plugin</artifactId>
                    <version>1.7.11</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>