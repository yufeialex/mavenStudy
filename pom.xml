<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--官方文档： http://maven.apache.org/pom.html-->

    <!--约定优于配置（Conversion Over Configuration）-->
    <!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。-->
    <parent>
        <!--被继承的父项目的构件标识符-->
        <artifactId>spring-boot-starter-parent</artifactId>
        <!--被继承的父项目的全球唯一标识符-->
        <groupId>org.springframework.boot</groupId>
        <!--被继承的父项目的版本-->
        <version>1.3.5.RELEASE</version>
        <!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，
        其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。-->
        <!--从仓库下载，没有相对路径；因为springboot也不是你项目中的，没办法指出相对路径-->
        <relativePath/>
    </parent>
    <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->
    <modelVersion>4.0.0</modelVersion>

    <!--GAV中，G是项目，A是模块，打包的结果默认是使用 A+版本号 作为名称，而A的命名是项目名作为前缀。-->
    <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app-->
    <groupId>com.founder.cms</groupId>
    <!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；
    在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。-->
    <artifactId>studyMaven</artifactId>
    <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->
    <version>3.1.2-SNAPSHOT</version>
    <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型-->
    <packaging>pom</packaging>

    <!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径-->
    <modules>
        <!--里面的值是模块pom文件所在的相对本pom文件的路径-->
        <!--maven会计算出一个反应堆构建顺序来构建-->
        <module>core</module>
        <module>web</module>
    </modules>

    <!--maven内置3大属性支持灵活构建，即属性、Profile和资源过滤-->
    <!--有6类Maven属性，下面的是自定义属性，其他包括：
    内置属性，POM属性，settings属性，Java属性，环境变量属性-->
    <!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是<name>value</name>。-->
    <properties>
        <!-- Web -->
        <jsp.version>2.3.1</jsp.version>
        <jstl.version>1.2.0</jstl.version>
        <servlet.version>3.1.0</servlet.version>

        <!--统一源代码编码方式-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!--统一源代码与编译输出的JDK版本-->
        <!--下面的maven-compiler-plugin和这3个属性配置的效果是一样的-->
        <!--如果项目没写后两个也可以，那是因为在父pom里面定义了。（有时候是springboot的父pom）-->
        <java.version>1.8</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!--效果和下面的插件配置一样-->
        <maven.test.skip>true</maven.test.skip>

        <autoVersionSubmodules>true</autoVersionSubmodules>
        <updateBranchVersions>true</updateBranchVersions>
        <additionalparam>-Xdoclint:none</additionalparam>
        <docker.image.prefix>founder</docker.image.prefix>
        <skipDocker>true</skipDocker>
    </properties>

    <!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和artifact ID信息），
    如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。-->
    <dependencyManagement>
        <dependencies>

            <!--除了继承以外，引入springboot的另一种方式-->
            <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-dependencies</artifactId>-->
            <!--<version>1.3.5.RELEASE</version>-->
            <!--<type>pom</type>-->
            <!--<scope>import</scope>-->
            <!--</dependency>-->

            <!--import范围依赖，只能在dependencyManagement中使用，必须依赖POM类型项目，-->
            <!--将其中的dependencyManagement配置导入并合并到当前POM的dependencyManagement元素中-->
            <!--如果想要在本模块使用与下面模块完全一样的dependencyManagement，除了复制配置或者继承，还可以用import-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Brixton.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Founder Dependencies -->
            <dependency>
                <groupId>com.founder.common</groupId>
                <artifactId>common-dependencies</artifactId>
                <!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。-->
                <version>${founder.common.version}</version>
                <!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。
            类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，
            就可以在 plugin里定义新的类型。-->
                <type>pom</type>
                <!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。
                - compile ：默认范围，用于编译
                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath
                - runtime: 在执行时需要使用
                - test:    用于test任务时使用
                - system: 需要外在提供相应的元素。通过systemPath来取得
                - systemPath: 仅用于范围为system。提供相应的路径
                - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用-->
                <scope>import</scope>
            </dependency>

            <!-- cms -->
            <dependency>
                <groupId>com.founder.cms</groupId>
                <artifactId>studyMaven-common</artifactId>
                <version>${project.version}</version>
            </dependency>

            <!--web-->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${servlet.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>javax.servlet.jsp</groupId>
                <artifactId>javax.servlet.jsp-api</artifactId>
                <version>${jsp.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>${jstl.version}</version>
            </dependency>

            <dependency>
                <groupId>net.sf.json-lib</groupId>
                <artifactId>json-lib</artifactId>
                <version>2.4</version>
                <!--classifier元素用来帮助定义构件输出的一些附属构件。附属构件与主构件对应，比如主构件是 kimi-app-2.0.0.jar 该项目可能还会通过使用一些插件生成-->
                <!--如 kimi-app-2.0.0-javadoc.jar 、 kimi-app-2.0.0-sources.jar 这样两个附属构件。这时候，-->
                <!--javadoc,sources就是这两个附属构件的classifier,这样附属构件也就拥有了自己唯一的坐标。-->
                <!--不能直接定义项目的classifer,因为附属构件不是项目直接默认生成的，而是由附加的插件帮助生成的。-->
                <!--如果不定义classifier的话就maven就会报错说找不到jar文件-->

                <!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。
                例如，如果你想要构建两个单独的构件成 JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。-->

                <classifier>jdk15</classifier>
            </dependency>

            <!-- 范围依赖，作用：
      1、控制依赖与3种classpath，编译、测试、运行的关系，默认是compile，3种都有效
      2、影响传递依赖，具体参考笔记中图片。
      3、依赖调节：原则一，路径最近者优先；原则二：第一声明者优先。-->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${servlet.version}</version>
                <!--编译和测试时候用，运行时候容器已经提供了-->
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.hsqldb</groupId>
                <artifactId>hsqldb</artifactId>
                <!--还有一个典型例子是JDBC驱动-->
                <scope>runtime</scope>
            </dependency>

            <!--范围与provided一致，但是必须用systemPath显示指定路径，不可移植，谨慎使用-->
            <dependency>
                <groupId>javax.sql</groupId>
                <artifactId>jdbc-stdext</artifactId>
                <version>2.0</version>
                <scope>system</scope>
                <!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。
                需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。-->
                <systemPath>${java.home}/lib/rt.jar</systemPath>
            </dependency>

            <!--排除依赖 -->
            <!--两种原因：-->
            <!--1.这个包引用了SNAPSHOT版本，我剔除后自己使用稳定版本-->
            <!--2.这个包应用了没有版权的包，我使用开源的包-->
            <dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-neo4j-rest</artifactId>
                <!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。
                此元素主要用于解决版本冲突问题-->
                <exclusions>
                    <exclusion>
                        <groupId>org.neo4j.test</groupId>
                        <artifactId>neo4j-harness</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>


            <!-- 可选依赖 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.10</version>
                <!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。-->
                <!--依赖我的项目不会自动依赖这个包，需要自己引入-->
                <optional>true</optional>
            </dependency>

            <dependency>
                <groupId>postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>8.4-701.jdbc3</version>
                <!--我的项目可能是个数据库工具，但是实际使用什么数据库由使用者决定-->
                <!--理想情况不应该使用可选依赖，应该符合单一职责性原则，这种情况就建立两个-->
                <optional>true</optional>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!-- Compile -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!-- Test -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <!-- -DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。-->
                    <skipTests>true</skipTests>
                    <!-- -Dmaven.test.skip=true，不执行测试用例，也不编译测试用例类。-->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!-- Tomcat -->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <path>/${project.artifactId}</path>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>